#include <stdbool.h>
#include <stdint.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "inc/hw_gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/rom.h"
#include "drivers/buttons.h"
#include "utils/uartstdio.h"
#include "switch_task.h"
#include "led_task.h"
#include "priorities.h"
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"
#include "esp/esp_uart.h"
#include "at/at.h"
#include "driverlib/uart.h"
#include <string.h>
#include "tasks/esp/esp_logic_task.h"
#include "mqtt/mqtt_client.h"

//*****************************************************************************
//
// The stack size for the display task.
//
//*****************************************************************************
#define ESPTASKSTACKSIZE        128         // Stack size in words

char receiveBuffer[128];
xQueueHandle g_pEspMqttRcvQueue;
extern bool configurationRunning;

static void MqttTask(void *pvParameters)
{
    while (1)
    {
        xQueueReceive(g_pEspMqttRcvQueue, &receiveBuffer, portMAX_DELAY);
        safePrintf(receiveBuffer);
    }
}

uint32_t MqttTaskInit(void)
{
    g_pEspMqttRcvQueue = xQueueCreate(4, sizeof(receiveBuffer));
    g_pEspMqttRcvQueue = xQueueCreate(4, sizeof(receiveBuffer));
    if (xTaskCreate(MqttTask, (const portCHAR *)"MQTT", ESPTASKSTACKSIZE, NULL,
            tskIDLE_PRIORITY + PRIORITY_MQTTC_TASK, NULL) != pdTRUE)
    {

        return (1);
    }
    MQTT_CONNECT(); //TODO this should return boolean!
    vTaskDelay(1000);
    MQTT_SUB("testTopic");
    //vTaskDelay(1000);
    //MQTT_PUB("testTopic", "CONNECTED");
    return (0);
}
