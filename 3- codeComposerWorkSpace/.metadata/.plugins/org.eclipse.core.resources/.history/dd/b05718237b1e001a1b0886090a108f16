#include <stdbool.h>
#include <stdint.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "inc/hw_gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/rom.h"
#include "drivers/buttons.h"
#include "utils/uartstdio.h"
#include "switch_task.h"
#include "led_task.h"
#include "priorities.h"
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"
#include "esp/esp_uart.h"
#include "at/at.h"
#include "driverlib/uart.h"
#include <string.h>

//*****************************************************************************
//
// The stack size for the display task.
//
//*****************************************************************************
#define ESPTASKSTACKSIZE        512         // Stack size in words

extern char ReceivedData[512];
xSemaphoreHandle g_pEspRcvBufferSemaphore;
xSemaphoreHandle g_pUART1Semaphore;
extern xSemaphoreHandle g_pUARTSemaphore;
xQueueHandle g_pReceiveBufferQueue;

char receiveBuffer[128];
int bufferPointer = 0;

struct Packet
{
    char line[128];
    int pointer;
}pack;

void UARTInt1Handler()
{
    char a = UARTCharGet(UART1_BASE);
    if (a != '\r' && a != '\0')
    {
        if (a == '\n' && bufferPointer >= 1)
        {
            pack.pointer = bufferPointer;
            strcpy(pack.line, receiveBuffer);
            xQueueSend(g_pReceiveBufferQueue, &pack, 0);
            bufferPointer = 0;
        }
        else if (a != '\n')
        {
            receiveBuffer[bufferPointer] = a;
            bufferPointer++;
        }
    }
}

static void EspRcvTask(void *pvParameters)
{
    while (1)
    {
        struct Packet packetToAnalyze;
        xQueueReceive(g_pReceiveBufferQueue, &packetToAnalyze, portMAX_DELAY);
        char toprint[128];
        strncpy(toprint, packetToAnalyze.line, packetToAnalyze.pointer);
        int aux = packetToAnalyze.pointer;
        while(aux != sizeof(packetToAnalyze.line)){
            toprint[aux] = '\0';
            aux++;
        }

        if(configurationRunning)
        //PUBLISH TO THE LOGIC TASK QUEUE

        //LEAVE THIS FOR DEBUG!
        xSemaphoreTake(g_pUARTSemaphore, portMAX_DELAY);
        UARTprintf(toprint);
        UARTprintf("\n");
        xSemaphoreGive(g_pUARTSemaphore);
    }

}

//*****************************************************************************
//
// Initializes the ESP RCV task.
//
//*****************************************************************************
uint32_t EspRcvTaskInit(void)
{
    g_pReceiveBufferQueue = xQueueCreate(4, sizeof(struct Packet));
    if (xTaskCreate(EspRcvTask, (const portCHAR *)"ESPRCV", ESPTASKSTACKSIZE, NULL,
            tskIDLE_PRIORITY + PRIORITY_ESP_RCV_TASK, NULL) != pdTRUE)
    {
        return (1);
    }
    return (0);
}
