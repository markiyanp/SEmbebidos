#include <stdbool.h>
#include <stdint.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "inc/hw_gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/rom.h"
#include "drivers/buttons.h"
#include "utils/uartstdio.h"
#include "switch_task.h"
#include "led_task.h"
#include "priorities.h"
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"
#include "esp/esp_uart.h"
#include "at/at.h"
#include "driverlib/uart.h"
#include <string.h>
#include "tasks/esp/esp_logic_task.h"
#include "mqtt/mqtt_client.h"
#include "utils/uart_config.h"

//*****************************************************************************
//
// The stack size for the display task.
//
//*****************************************************************************
#define ESPTASKSTACKSIZE        128         // Stack size in words

#define MQTT_ITEM_SIZE           sizeof(pubPack)
#define MQTT_QUEUE_SIZE          5

xQueueHandle g_pEspMqttRcvQueue;

struct PubPacket
{
    char *topic;
    char *message;
} pubPack;

static void MqttRcvTask(void *pvParameters)
{
    while (1)
    {
        xQueueReceive(g_pEspMqttRcvQueue, &pubPack, portMAX_DELAY);
        safePrintf(pubPack.message);
        //MQTT_PUB(pubPack.topic, pubPack.message);
    }
}

uint32_t MqttRcvTaskInit(void)
{
    g_pEspMqttRcvQueue = xQueueCreate(MQTT_QUEUE_SIZE, MQTT_ITEM_SIZE);
    if (xTaskCreate(MqttRcvTask, (const portCHAR *)"MQTT_RCV", ESPTASKSTACKSIZE, NULL,
            tskIDLE_PRIORITY + PRIORITY_MQTT_SND_TASK, NULL) != pdTRUE)
    {

        return (1);
    }
    return (0);
}
