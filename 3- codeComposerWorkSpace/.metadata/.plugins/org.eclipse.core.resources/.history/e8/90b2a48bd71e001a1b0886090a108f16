#include <stdint.h>
#include <stdbool.h>
#include <string.h>

#include "priorities.h"
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"
#include "esp/esp_uart.h"

extern xQueueHandle g_pLogicTasksQueue;
extern xSemaphoreHandle g_pEspRcvBufferSemaphore;
extern xSemaphoreHandle g_pATResponseSemaphore;
extern char ReceivedData[512];
extern char str[128];

#define TICKSTOWAIT 200

struct Task{
    char request[128];
    char response[128];
    int numRetries;
}task;

bool ATesp(void)
{
    strcpy(task.request, "AT");
    strcpy(task.response, "OK");
    task.numRetries = 5;
    xQueueSend(g_pLogicTasksQueue, &task, portMAX_DELAY);
    //SendATCommand("AT");
    if(xSemaphoreTake(g_pATResponseSemaphore,( TickType_t ) TICKSTOWAIT ) == pdFALSE){
        return false;
    }
    return true;
}

bool RSTesp(void)
{
    SendATCommand("AT+RST");
    return true;
}

bool CWMODEesp(void)
{
    SendATCommand("AT+CWMODE=1");
    return recvFind("OK");
}

bool CWJAPesp(void)
{
    SendATCommand("AT+CWJAP=\"Magellan\",\"1234567890\""); //Your Wifi: NetworkName, Password
    return recvFind("OK");
}

bool CWQAPesp(void)
{
    SendATCommand("AT+CWQAP");
    return recvFind("OK");
}

bool CIPMUXesp(void)
{
    SendATCommand("AT+CIPMUX=0");
    return recvFind("OK");
}

bool ATGMResp(char *version)
{
    SendATCommand("AT+GMR");
    return recvFindAndFilter("OK", "\r\r\n", "\r\n\r\nOK", version, 10000);
}

/*bool aCWMODEesp(char *list)
{
    SendATCommand("AT+CWMODE=?");
    return recvFindAndFilter("OK", "+CWMODE:(", ")\r\n\r\nOK", list, 10000);
}

bool aCWLAPesp(char *list)
{
    SendATCommand("AT+CWLAP");
    return recvFindAndFilter("OK", "\r\r\n", "\r\n\r\nOK", list, 15000);
}

bool aCIFSResp(char *list)
{
    SendATCommand("AT+CIFSR");
    return recvFindAndFilter("OK", "\r\r\n", "\r\n\r\nOK", list, 15000);
}

bool CIPSTOesp(void)
{
    //memset(ReceivedData, 0, sizeof(ReceivedData));
    //ClearReceiveBuffer();
    SendATCommand("AT+CIPSTO=10000");
    return recvFind("OK", 2000, true);
}
*/

bool CIPSTARTesp(void)
{
    SendATCommand("AT+CIPSTART=\"TCP\",\"194.210.220.194\",21"); //Server IP and Port: such as 192.255.0.100, 9999
    return recvFind("OK");
}

bool CIPCLOSEesp(void)
{
    SendATCommand("AT+CIPCLOSE");
    return recvFind("OK");
}

bool CIPSENDesp(char *text)
{
    int len = strlen(text) + 2;

    itoa(len, str);

    char* AT_CMD_SEND = "AT+CIPSEND=";
    char CMD_TEXT[128];
    strcpy(CMD_TEXT, AT_CMD_SEND);
    strcat(CMD_TEXT, str);

    memset(ReceivedData, 0, sizeof(ReceivedData));
    ClearReceiveBuffer();
    SendATCommand(CMD_TEXT);
    delay(100);
    SendATCommand(text);
    return recvFind("SEND OK");
}
