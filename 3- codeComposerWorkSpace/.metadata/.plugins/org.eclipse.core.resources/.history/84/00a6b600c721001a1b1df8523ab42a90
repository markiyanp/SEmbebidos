#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include "stdio.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "inc/hw_gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/rom.h"
#include "drivers/buttons.h"
#include "utils/uartstdio.h"
#include "switch_task.h"
#include "led_task.h"
#include "priorities.h"
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"
#include "mqtt/mqtt_client.h"
#include "utils/uart_config.h"
#include "nrf/nrf24l01.h"
#include <string.h>

//*****************************************************************************
//
// The stack size for the display task.
//
//*****************************************************************************
#define MANAGERSTACKSIZE        256         // Stack size in words

#define NRF_ITEM_SIZE           sizeof(data)
#define NRF_QUEUE_SIZE          5

extern xQueueHandle g_pRadioRcvQueue;
extern xQueueHandle g_pManagerRadioToSendQueue;
extern xQueueHandle g_pEspMqttSndQueue;

struct DATA
{
    uint8_t id;
    uint8_t field1;
    uint8_t field2;
} data;

struct PubPacket
{
    char *topic;
    char *message;
} pub;

static void ManagerTask(void *pvParameters)
{
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 200;
    while (1)
    {
        if ((xQueueReceive(g_pRadioRcvQueue, &data, 0) != pdFALSE))
        {
            xLastWakeTime = xTaskGetTickCount();
            char str[6];
            switch (data.id)
            {
            case 1:
                sprintf(str, "%d", data.field1);
                pub.topic = "semb/temp";
                pub.message = str;
                xQueueSend(g_pEspMqttSndQueue, &pub, 0);
                sprintf(str, "%d", data.field2);
                pub.topic = "semb/hum";
                pub.message = str;
                xQueueSend(g_pEspMqttSndQueue, &pub, 0);
                break;
            case 2:
                sprintf(str, "%d", data.field1);
                pub.topic = "semb/movm";
                pub.message = str;
                xQueueSend(g_pEspMqttSndQueue, &pub, 0);
                break;
            case 3:
                sprintf(str, "%d", data.field1);
                pub.topic = "semb/door";
                pub.message = str;
                xQueueSend(g_pEspMqttSndQueue, &pub, 0);
                break;
            default:
                break;
            }
            vTaskDelayUntil(&xLastWakeTime, xFrequency);

        }
        if ((xQueueReceive(g_pManagerRadioToSendQueue, &pub, 0) != pdFALSE))
        {
            safePrintf(
                    "RECEIVED DATA FROM MQTT RECEIVE TASK. ILL SEND IT TO THE RADIO");
        }
        // MQTT_PUB("semb/temphum", "temp/hum");
    }
}

//*****************************************************************************
//
// Initializes the Manager Task
//
//*****************************************************************************
uint32_t ManagerTaskInit(void)
{
    if (xTaskCreate(ManagerTask, (const portCHAR *)"MANAGE", MANAGERSTACKSIZE, NULL,
            tskIDLE_PRIORITY + PRIORITY_MANAGER_TASK, NULL) != pdTRUE)
    {
        return (1);
    }
    return (0);
}

